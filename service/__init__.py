# Copyright 2016, 2024 John J. Rofrano. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Package: service
Package for the application models and service routes
This module creates and configures the Flask app and sets up the logging
and SQL database
"""
import sys
from flask import Flask
from service import config
from service.common import log_handlers
from service.common.cli_commands import init_cli
import os


############################################################
# Initialize the Flask instance
############################################################
def create_app():
    """Initialize the core application."""

    # Create the Flask app
    app = Flask(__name__)
    app.config.from_object(config)

    # Overwrite the DATABASE_URI from the config  <-- ADD THIS
    app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get(
        "DATABASE_URL", app.config["SQLALCHEMY_DATABASE_URI"]
    )

    # Turn off strict slashes because it violates best practices
    app.url_map.strict_slashes = False

    with app.app_context():
        # Import the routes After the Flask app is created
        # pylint: disable=import-outside-toplevel
        from service.routes import api_bp, generate_apikey

        app.register_blueprint(api_bp)

        try:
            from service.models import db

            db.init_app(app)
            db.create_all()

        except Exception as error:  # pylint: disable=broad-except
            app.logger.critical("%s: Cannot continue", error)
            # gunicorn requires exit code 4 to stop spawning workers when they die
            sys.exit(4)

        # Set up logging for production
        log_handlers.init_logging(app, "gunicorn.error")
        init_cli(app)

        app.logger.info(70 * "*")
        app.logger.info(
            "  P R O D U C T   S E R V I C E   R U N N I N G  ".center(70, "*")
        )
        app.logger.info(70 * "*")

        # If an API Key was not provided, autogenerate one
        if not app.config.get("API_KEY"):
            app.config["API_KEY"] = generate_apikey()
            app.logger.info("Missing API Key! Autogenerated: %s", app.config["API_KEY"])

        app.logger.info("Service initialized!")

        return app
